<?xml version='1.0' encoding='utf-8'?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">

<Type Name="boost::circular_buffer&lt;*&gt;">
    <DisplayString>{{ size={m_size} }}</DisplayString>
    <Expand>
        <Item Name="[size]">m_size</Item>
        <Item Name="[capacity]">(size_t)(m_end - m_buff)</Item>
        <IndexListItems>
            <Size>m_size</Size>
            <ValueNode>*(m_first + ($i &lt; (m_end - m_first) ? $i : $i - (size_t)(m_end - m_buff)))</ValueNode>
        </IndexListItems>
    </Expand>
</Type>

<Type Name="boost::cb_details::iterator&lt;*&gt;">
    <DisplayString>{*m_it}</DisplayString>
    <Expand>
        <Item Name="[ptr]">m_it</Item>
    </Expand>
</Type>

<Type Name="boost::dynamic_bitset&lt;*&gt;">
    <DisplayString>{{ bits={m_num_bits} }}</DisplayString>
    <Expand>
        <Item Name="[bits]">m_num_bits</Item>
        <IndexListItems>
            <Size>m_num_bits</Size>
            <ValueNode>(bool)((m_bits._Myfirst[$i / bits_per_block] &gt;&gt; ($i % bits_per_block)) &amp; 1)</ValueNode>
        </IndexListItems>
    </Expand>
</Type>

<!--Copyright William Buklis 2007. Use, modification and distribution are subject to-->
<!--the Boost Software License, Version 1.0. (See accompanying file LICENSE_1_0.txt-->
<!--or copy at http://www.boost.org/LICENSE_1_0.txt)-->
<!--@author   Bill Buklis-->
<!--@email    bill at pbjzone dot com-->
<Type Name="boost::array&lt;*,*&gt;">
    <DisplayString>{{ size={(size_t) $T2} }}</DisplayString>
    <Expand>
        <ArrayItems>
            <Size>$T2</Size>
            <ValuePointer>elems</ValuePointer>
        </ArrayItems>
    </Expand>
</Type>

<Type Name="boost::container::basic_string&lt;char,*&gt;">
    <DisplayString Condition="members_.m_repr.s.h.is_short != 0">{members_.m_repr.s.data,s}</DisplayString>
    <DisplayString Condition="members_.m_repr.s.h.is_short == 0">{((long_t*)&amp;members_.m_repr.r)->start,s}</DisplayString>
    <StringView Condition="members_.m_repr.s.h.is_short != 0">members_.m_repr.s.data,s</StringView>
    <StringView Condition="members_.m_repr.s.h.is_short == 0">((long_t*)&amp;members_.m_repr.r)->start,s</StringView>
    <Expand>
        <Item Condition="members_.m_repr.s.h.is_short != 0" Name="[size]">(int)members_.m_repr.s.h.length</Item>
        <Item Condition="members_.m_repr.s.h.is_short == 0" Name="[size]">((long_t*)&amp;members_.m_repr.r)->length</Item>
        <Item Condition="members_.m_repr.s.h.is_short != 0" Name="[capacity]">InternalBufferChars - 1</Item>
        <Item Condition="members_.m_repr.s.h.is_short == 0" Name="[capacity]">((long_t*)&amp;members_.m_repr.r)->storage - 1</Item>
        <ArrayItems Condition="members_.m_repr.s.h.is_short != 0">
            <Size>(int)members_.m_repr.s.h.length</Size>
            <ValuePointer>members_.m_repr.s.data</ValuePointer>
        </ArrayItems>
        <ArrayItems Condition="members_.m_repr.s.h.is_short == 0">
            <Size>((long_t*)&amp;members_.m_repr.r)->length</Size>
            <ValuePointer>((long_t*)&amp;members_.m_repr.r)->start</ValuePointer>
        </ArrayItems>
    </Expand>
</Type>

<Type Name="boost::container::basic_string&lt;unsigned short,*&gt;">
    <AlternativeType Name="boost::container::basic_string&lt;wchar_t,*&gt;" />
    <DisplayString Condition="members_.m_repr.s.h.is_short != 0">{members_.m_repr.s.data,su}</DisplayString>
    <DisplayString Condition="members_.m_repr.s.h.is_short == 0">{((long_t*)&amp;members_.m_repr.r)->start,su}</DisplayString>
    <StringView Condition="members_.m_repr.s.h.is_short != 0">members_.m_repr.s.data,su</StringView>
    <StringView Condition="members_.m_repr.s.h.is_short == 0">((long_t*)&amp;members_.m_repr.r)->start,su</StringView>
    <Expand>
        <Item Condition="members_.m_repr.s.h.is_short != 0" Name="[size]">(int)members_.m_repr.s.h.length</Item>
        <Item Condition="members_.m_repr.s.h.is_short == 0" Name="[size]">((long_t*)&amp;members_.m_repr.r)->length</Item>
        <Item Condition="members_.m_repr.s.h.is_short != 0" Name="[capacity]">InternalBufferChars - 1</Item>
        <Item Condition="members_.m_repr.s.h.is_short == 0" Name="[capacity]">((long_t*)&amp;members_.m_repr.r)->storage - 1</Item>
        <ArrayItems Condition="members_.m_repr.s.h.is_short != 0">
            <Size>(int)members_.m_repr.s.h.length</Size>
            <ValuePointer>members_.m_repr.s.data</ValuePointer>
        </ArrayItems>
        <ArrayItems Condition="members_.m_repr.s.h.is_short == 0">
            <Size>((long_t*)&amp;members_.m_repr.r)->length</Size>
            <ValuePointer>((long_t*)&amp;members_.m_repr.r)->start</ValuePointer>
        </ArrayItems>
    </Expand>
</Type>

<Type Name="boost::container::deque&lt;*&gt;">
    <DisplayString>{{ size={(sizeof($T1) &lt; 512 ? size_t(512 / sizeof($T1)) : size_t(1)) * 
        (members_.m_finish.m_node - members_.m_start.m_node - 1) + (members_.m_finish.m_cur - members_.m_finish.m_first) + 
        (members_.m_start.m_last - members_.m_start.m_cur)} }}</DisplayString>
    <Expand>
        <Item Name="[size]">(sizeof($T1) &lt; 512 ? size_t(512 / sizeof($T1)) : size_t(1)) * 
        (members_.m_finish.m_node - members_.m_start.m_node - 1) + (members_.m_finish.m_cur - members_.m_finish.m_first) + 
        (members_.m_start.m_last - members_.m_start.m_cur)</Item>
        <Item Name="[buffer_size]">sizeof($T1) &lt; 512 ? size_t(512 / sizeof($T1)) : size_t(1)</Item>
        <IndexListItems>
            <Size>(sizeof($T1) &lt; 512 ? size_t(512 / sizeof($T1)) : size_t(1)) * 
            (members_.m_finish.m_node - members_.m_start.m_node - 1) + (members_.m_finish.m_cur - members_.m_finish.m_first) + 
            (members_.m_start.m_last - members_.m_start.m_cur)</Size>
            <ValueNode>members_.m_start.m_node[(($i + (members_.m_start.m_cur - members_.m_start.m_first)) / (sizeof($T1) &lt; 512 ? size_t(512 / sizeof($T1)) : size_t(1)))][($i + (members_.m_start.m_cur - members_.m_start.m_first)) % (sizeof($T1) &lt; 512 ? size_t(512 / sizeof($T1)) : size_t(1))]</ValueNode>
        </IndexListItems>
    </Expand>
</Type>

<Type Name="boost::container::deque_base&lt;*&gt;::iterator">
    <AlternativeType Name="boost::container::deque_base&lt;*&gt;::const_iterator" />
    <DisplayString>{m_cur}</DisplayString>
    <Expand>
        <Item Name="[ptr]">m_cur</Item>
    </Expand>
</Type>

<Type Name="boost::container::list&lt;*&gt;">
    <AlternativeType Name="boost::container::slist&lt;*&gt;" />
    <DisplayString>{members_.m_icont}</DisplayString>
    <Expand>
        <ExpandedItem>members_.m_icont</ExpandedItem>
    </Expand>
</Type>

<Type Name="boost::container::map&lt;*&gt;">
    <AlternativeType Name="boost::container::set&lt;*&gt;" />
    <DisplayString>{m_tree.members_.m_icont}</DisplayString>
    <Expand>
        <ExpandedItem>m_tree.members_.m_icont</ExpandedItem>
    </Expand>
</Type>

<Type Name="boost::container::list&lt;*&gt;::iterator">
    <AlternativeType Name="boost::container::list&lt;*&gt;::const_iterator" />
    <DisplayString>{m_it}</DisplayString>
    <Expand>
        <ExpandedItem>m_it</ExpandedItem>
    </Expand>
</Type>

<!--BOOST_VISUALIZER_START boost::intrusive::list-->

<!--Copyright Boris [monade] 2010. Use, modification and distribution are subject-->
<!--to the Boost Software License, Version 1.0. (See accompanying file LICENSE_1_0.txt-->
<!--or copy at http://www.boost.org/LICENSE_1_0.txt)-->

<!--@guid     CF808B30-3031-11DE-8C30-0800200C9B66-->
<!--@platform msvc-8, msvc-9, msvc-10-->
<!--@version  1.0-->
<!--@author   Boris [monade]-->
<!--@email    monade at gmail dot com-->

<!-- work only with base hook -->
<Type Name="boost::intrusive::list&lt;*,*&gt;">
    <AlternativeType Name="boost::intrusive::slist&lt;*,*&gt;" />
    <DisplayString>{{ size={data_.root_plus_size_.size_} }}</DisplayString>
    <Expand>
        <LinkedListItems>
            <Size>data_.root_plus_size_.size_</Size> 
            <HeadPointer>data_.root_plus_size_.root_.next_</HeadPointer>
            <NextPointer>next_</NextPointer>
            <ValueNode>*(($T1 *) this)</ValueNode>
        </LinkedListItems>
    </Expand>
</Type>

<Type Name="boost::intrusive::list_iterator&lt;boost::intrusive::list_impl&lt;boost::intrusive::listopt&lt;boost::intrusive::detail::base_hook_traits&lt;*,boost::intrusive::list_node_traits&lt;void*&gt;,*,boost::intrusive::default_tag,*&gt;,unsigned int,*&gt; &gt;,*&gt;">
    <AlternativeType Name="boost::intrusive::slist_iterator&lt;boost::intrusive::slist_impl&lt;boost::intrusive::slistopt&lt;boost::intrusive::detail::base_hook_traits&lt;*,boost::intrusive::slist_node_traits&lt;void*&gt;,*,boost::intrusive::default_tag,*&gt;,unsigned int,*&gt; &gt;,*&gt;" />
    <DisplayString>{*($T1*)(members_.nodeptr_)}</DisplayString>
    <Expand>
        <Item Name="[ptr]">*($T1*)(members_.nodeptr_)</Item>
    </Expand>
</Type>

<!-- !!! -->
<Type Name="boost::container::_List_iterator&lt;*&gt;">
    <AlternativeType Name="boost::container::_List_const_iterator&lt;*&gt;" />
    <DisplayString>{_Ptr-&gt;_Myval}</DisplayString>
    <Expand>
        <Item Name="[ptr]">&amp;_Ptr-&gt;_Myval</Item>
    </Expand>
</Type>


<Type Name="boost::container::vector&lt;*&gt;::members_holder">
    <DisplayString>{{ size={members_.m_size} }}</DisplayString>
    <Expand>
        <Item Name="[size]">members_.m_size</Item>
        <Item Name="[capacity]">members_.m_capacity</Item>
        <ArrayItems>
            <Size>members_.m_size</Size>
            <ValuePointer>members_.m_start</ValuePointer>
        </ArrayItems>
    </Expand>
</Type>

<Type Name="boost::container::container_detail::vector_iterator&lt;*&gt;">
    <AlternativeType Name="boost::container::container_detail::vector_const_iterator&lt;*&gt;" />
    <DisplayString>{*m_ptr}</DisplayString>
    <Expand>
        <Item Name="[ptr]">m_ptr</Item>
    </Expand>
</Type>

<!-- !!! -->
<Type Name="boost::container::_Tree_iterator&lt;*&gt;">
    <AlternativeType Name="boost::container::_Tree_const_iterator&lt;*&gt;" />
    <DisplayString>{_Ptr-&gt;_Myval}</DisplayString>
    <Expand>
        <Item Name="[ptr]">&amp;_Ptr-&gt;_Myval</Item>
    </Expand>
</Type>
</AutoVisualizer>
