<?xml version='1.0' encoding='utf-8'?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
<!-- based on https://svn.boost.org/trac/boost/wiki/DebuggerVisualizers -->
<!--boost::adjacency_list<OutEdgeList, VertexList, Directed,VertexProperties, EdgeProperties, GraphProperties, EdgeList>-->
<Type Name="boost::adjacency_list&lt;*,*,*,*,*&gt;">
    <DisplayString>{{edges={m_edges} vertices={m_vertices}}}</DisplayString>
    <Expand>
        <Item Name="[edges]">m_edges</Item>
        <Item Name="[vertices]">m_vertices</Item>
	</Expand>
</Type>

<Type Name="boost::dynamic_bitset&lt;*&gt;">
    <DisplayString>{{ bits={m_num_bits} }}</DisplayString>
    <Expand>
        <Item Name="[bits]">m_num_bits</Item>
        <IndexListItems>
            <Size>m_num_bits</Size>
            <ValueNode>(bool)((m_bits._Myfirst[$i / bits_per_block] &gt;&gt; ($i % bits_per_block)) &amp; 1)</ValueNode>
        </IndexListItems>
    </Expand>
</Type>

<Type Name="boost::logic::tribool">
    <DisplayString Condition="value == 1">true</DisplayString>
    <DisplayString Condition="value == 2">indeterminate</DisplayString>
    <DisplayString>false</DisplayString>
    <Expand/>
</Type>

<!--Copyright William Buklis 2007. Use, modification and distribution are subject to-->
<!--the Boost Software License, Version 1.0. (See accompanying file LICENSE_1_0.txt-->
<!--or copy at http://www.boost.org/LICENSE_1_0.txt)-->
<!--@author   Bill Buklis-->
<!--@email    bill at pbjzone dot com-->
<Type Name="boost::array&lt;*,*&gt;">
    <DisplayString>{{ size={(size_t) $T2} }}</DisplayString>
    <Expand>
        <ArrayItems>
            <Size>$T2</Size>
            <ValuePointer>elems</ValuePointer>
        </ArrayItems>
    </Expand>
</Type>

<Type Name="boost::any::holder&lt;*&gt;">
    <DisplayString>{*($T1*)&amp;held}</DisplayString>
    <Expand>
        <Item Name="[value]">*($T1*)&amp;held</Item>
    </Expand>
</Type>

<Type Name="boost::any">
	<DisplayString Condition="content == 0">empty</DisplayString>
	<DisplayString Condition="content != 0">any {*content}</DisplayString>
    <Expand>
		<Item Name="[holder]" Condition="content != 0">content</Item>
    </Expand>
</Type>

<!--Copyright Daniel Kruegler 2008. Use, modification and distribution are subject to-->
<!--the Boost Software License, Version 1.0. (See accompanying file LICENSE_1_0.txt-->
<!--or copy at http://www.boost.org/LICENSE_1_0.txt)-->
<!--@guid     D02681E0-021B-11DD-95FF-0800200C9A66-->
<!--@platform msvc-8, msvc-9-->
<!--@version  1.0-->
<!--@author   Daniel Kruegler-->
<!--@email    daniel dot kruegler at bdal dot de-->
<!--Usage-->
<!--All of the following text must be placed in the autoexp.dat file.-->
<!--Usage is automatic. No extra code is required.-->
<Type Name="boost::optional&lt;*&gt;">
	<DisplayString Condition="!m_initialized">empty</DisplayString>
	<DisplayString Condition="m_initialized">{*(($T1 *)m_storage.dummy_.data)}</DisplayString>
    <Expand>
		<Item Name="value" Condition="m_initialized">*(($T1 *)m_storage.dummy_.data)</Item>
    </Expand>
</Type>

<!--Copyright Filip Konvieka 2008. Use, modification and distribution are subject to-->
<!--the Boost Software License, Version 1.0. (See accompanying file LICENSE_1_0.txt-->
<!--or copy at http://www.boost.org/LICENSE_1_0.txt)-->
<!--@version  1.0-->
<!--@author   Filip Konvieka-->
<!--@email    filip dot konvicka at logis dot cz-->
<!--Usage-->
<Type Name="boost::interprocess::offset_ptr&lt;*&gt;">
	<DisplayString Condition="m_offset == 1">null</DisplayString>
	<DisplayString Condition="m_offset != 1">non-null</DisplayString>
    <DisplayString>#if(m_offset==1) (#("null")) #else (#("non-null"))</DisplayString>
    <Expand>
		<Item Name="[ptr]" Condition="m_offset != 1">($T1*)(((char*)(void*)this)+m_offset)</Item>
    </Expand>
</Type>

<!--boost::basic_regex from <regex>-->
<Type Name="boost::basic_regex&lt;char,*&gt;">
	<DisplayString Condition="m_pimpl.px == 0">empty</DisplayString>
	<DisplayString Condition="m_pimpl.px != 0">regex {m_pimpl.px-&lt;m_expression,s}</DisplayString>
	<StringView Condition="m_pimpl.px != 0">m_pimpl.px-&lt;m_expression,s</StringView>
    <Expand>
		<Item Name="[ptr]" Condition="m_pimpl.px != 0">*(m_pimpl.px)</Item>
    </Expand>
</Type>

<Type Name="boost::basic_regex&lt;wchar_t,*&gt;">
	<DisplayString Condition="m_pimpl.px == 0">empty</DisplayString>
	<DisplayString Condition="m_pimpl.px != 0">regex {m_pimpl.px-&lt;m_expression,su}</DisplayString>
	<StringView Condition="m_pimpl.px != 0">m_pimpl.px-&lt;m_expression,su</StringView>
    <Expand>
		<Item Name="[ptr]" Condition="m_pimpl.px != 0">*(m_pimpl.px)</Item>
    </Expand>
</Type>

<!--boost::mutex::scoped_lock and boost::mutex::scoped_try_lock-->
<Type Name="boost::unique_lock&lt;*&gt;">
	<DisplayString Condition="is_locked">locked</DisplayString>
	<DisplayString Condition="!is_locked">not locked</DisplayString>
    <Expand>
		<Item Name="mutex">m</Item>
    </Expand>
</Type>
</AutoVisualizer>
